
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is automatically generated in "Generate Kalman Filter C Code.ipynb" from https://github.com/tudelft/kalman_filter   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef EKF_{{ suffix|upper }}_CALC_H
#define EKF_{{ suffix|upper }}_CALC_H

#include <stdint.h>
#include <stdbool.h>

#define EKF_{{ suffix|upper }}_VERSION "{{ githash }}"

#define EKF_{{ suffix|upper }}_N_STATES {{ lenX }}
#define EKF_{{ suffix|upper }}_N_INPUTS {{ lenU }}
#define EKF_{{ suffix|upper }}_N_PROC_NOISES {{ lenQ }}
#define EKF_{{ suffix|upper }}_N_MEASUREMENTS {{ lenh }}

// getters
float ekf_{{ suffix|lower }}_get_X(int i);     // get state vector
float ekf_{{ suffix|lower }}_get_P(int i);     // get covariance matrix (upper diagonal)
bool ekf_{{ suffix|lower }}_get_use_quat(void);

// setters
void ekf_{{ suffix|lower }}_set_use_quat(bool use);
void ekf_{{ suffix|lower }}_set_Q(float Q[EKF_{{ suffix|upper }}_N_INPUTS]);                    // set process noise covariance matrix diagonal
void ekf_{{ suffix|lower }}_set_R(float R[EKF_{{ suffix|upper }}_N_MEASUREMENTS]);              // set measurement noise covariance matrix diagonal
void ekf_{{ suffix|lower }}_set_X(float X0[EKF_{{ suffix|upper }}_N_STATES]);                   // set state vector
void ekf_{{ suffix|lower }}_set_P_diag(float P_diag[EKF_{{ suffix|upper }}_N_STATES]);          // set covariance matrix diagonal

// prediction and update functions
void ekf_{{ suffix|lower }}_predict(float U[EKF_{{ suffix|upper }}_N_INPUTS], float dt);
void ekf_{{ suffix|lower }}_update(float Z[EKF_{{ suffix|upper }}_N_MEASUREMENTS]);

#endif // EKF_{{ suffix|upper }}_CALC_H

