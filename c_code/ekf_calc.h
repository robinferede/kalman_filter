
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is automatically generated in "Generate Kalman Filter C Code.ipynb" from https://github.com/tudelft/kalman_filter   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef EKF_FC_CALC_H
#define EKF_FC_CALC_H

#include <stdint.h>
#include <stdbool.h>

#define EKF_FC_VERSION (d4d46e4)

#define EKF_FC_N_STATES 16
#define EKF_FC_N_INPUTS 6
#define EKF_FC_N_PROC_NOISES 12
#define EKF_FC_N_MEASUREMENTS 7

// getters
float ekf_fc_get_X(int i);     // get state vector
float ekf_fc_get_P(int i);     // get covariance matrix (upper diagonal)
bool ekf_fc_get_use_quat(void);

// setters
void ekf_fc_set_use_quat(bool use);
void ekf_fc_set_Q(float Q[EKF_FC_N_INPUTS]);                    // set process noise covariance matrix diagonal
void ekf_fc_set_R(float R[EKF_FC_N_MEASUREMENTS]);              // set measurement noise covariance matrix diagonal
void ekf_fc_set_X(float X0[EKF_FC_N_STATES]);                   // set state vector
void ekf_fc_set_P_diag(float P_diag[EKF_FC_N_STATES]);          // set covariance matrix diagonal

// prediction and update functions
void ekf_fc_predict(float U[EKF_FC_N_INPUTS], float dt);
void ekf_fc_update(float Z[EKF_FC_N_MEASUREMENTS]);

#endif // EKF_FC_CALC_H
