
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is automatically generated in "Generate Kalman Filter C Code.ipynb" from https://github.com/tudelft/kalman_filter   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "ekf_calc.h"
#include <math.h>
#include <stdio.h>
#include "common/maths.h"
#include <stdbool.h>

#define N_STATES EKF_{{ suffix|upper }}_N_STATES
#define N_INPUTS EKF_{{ suffix|upper }}_N_INPUTS
#define N_PROC_NOISES EKF_{{ suffix|upper }}_N_PROC_NOISES
#define N_MEASUREMENTS EKF_{{ suffix|upper }}_N_MEASUREMENTS

static bool ekf_use_quat = true;

static float ekf_Q[N_PROC_NOISES];         // Kalman filter process noise covariance matrix (diagonal)
static float ekf_R[N_MEASUREMENTS];   // Kalman filter measurement noise covariance matrix (diagonal)

// state
static float ekf_X[N_STATES];
static float ekf_X_new[N_STATES];

// covariance matrix (upper diagonal) P[i,j] = P_upper_diagonal[i*(i+1)/2+j] (if i>=j)
static float ekf_P_upper_diagonal[N_STATES*(N_STATES+1)/2];
static float ekf_P_upper_diagonal_new[N_STATES*(N_STATES+1)/2];

// gain matrix calculations
static float ekf_S_full[N_MEASUREMENTS*N_MEASUREMENTS];
static float ekf_S_chol[N_MEASUREMENTS*N_MEASUREMENTS];
static float ekf_S_iDiag[N_MEASUREMENTS];
static float ekf_HP[N_STATES*N_MEASUREMENTS];
static float ekf_K[N_STATES*N_MEASUREMENTS];

// temporary variables
static float tmp[{{ lenTmp }}];

// pointers
static float *X = ekf_X;
static float *X_new = ekf_X_new;

static float *P = ekf_P_upper_diagonal;
static float *P_new = ekf_P_upper_diagonal_new;

static float *S = ekf_S_full;
static float *HP = ekf_HP;
static float *K = ekf_K;

// renaming
static float *Q = ekf_Q;
static float *R = ekf_R;

// pointer for swapping
static float *swap_ptr;

float ekf_{{ suffix|lower }}_get_X(int i) {
    return X[i];
}

float ekf_{{ suffix|lower }}_get_P(int i) {
    return P[i];
}

bool ekf_{{ suffix|lower }}_get_use_quat(void) {
    return ekf_use_quat;
}

void ekf_{{ suffix|lower }}_set_use_quat(bool use) {
    ekf_use_quat = use;
}

void ekf_{{ suffix|lower }}_set_Q(float Q[N_INPUTS]) {
    for (int i=0; i<N_PROC_NOISES; i++) {
        ekf_Q[i] = Q[i];
    }
}

void ekf_{{ suffix|lower }}_set_R(float R[N_MEASUREMENTS]) {
    for (int i=0; i<N_MEASUREMENTS; i++) {
        ekf_R[i] = R[i];
    }
}

void ekf_{{ suffix|lower }}_set_X(float X0[N_STATES]) {
    for (int i=0; i<N_STATES; i++) {
        X[i] = X0[i];
    }
}

void ekf_{{ suffix|lower }}_set_P_diag(float P_diag[N_STATES]) {
    // set P to zeros
    for (int i=0; i<N_STATES*(N_STATES+1)/2; i++) {
        P[i] = 0.;
    }
    // set diagonal
    for (int i=0; i<N_STATES; i++) {
        P[i*(i+1)/2+i] = P_diag[i];
    }
}

static void normalize_quaternion(float* q) {
    float norm = q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3];
    if (norm > 1e-4f) {
        float inorm = 1.f / sqrtf(norm);
        q[0] *= inorm;
        q[1] *= inorm;
        q[2] *= inorm;
        q[3] *= inorm;
    }
}

void ekf_{{ suffix|lower }}_predict(float U[N_INPUTS], float dt) {
    // PREDICTION STEP X_new, P_new = ...
    {{ prediction_code }}

    // swap X, X_new and P, P_new pointers
    swap_ptr = X;
    X = X_new;
    X_new = swap_ptr;

    normalize_quaternion(X+6);

    swap_ptr = P;
    P = P_new;
    P_new = swap_ptr;
}

void ekf_{{ suffix|lower }}_update(float Z[N_MEASUREMENTS]) {
    // prepare gain calculation
    {{ prepare_gain_code }}

    // we have symmetric S and PHT in col major.
    // Solve K as K^T = invS * H*P, as we have columns of HP. We solve columns of K^T, which are actually rows of K
    if (!ekf_use_quat) {
        // 3 state kalman update, yay
        float S_small[3*3];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                S_small[i + j*3] = S[i + j*N_MEASUREMENTS];
            }
        }
        float k_row[3];
        float S_small_chol[3*3];
        chol(S_small_chol, S_small, ekf_S_iDiag, 3);
        for (int i = 0; i < N_STATES; i++) {
            chol_solve(S_small_chol, ekf_S_iDiag, 3, (HP+(i*N_MEASUREMENTS)), k_row);
            for (int j = 0; j < 3; j++) {
                K[i + j*N_STATES] = k_row[j];
            }
            for (int j = 3; j < N_MEASUREMENTS; j++) {
                K[i + j*N_STATES] = 0.f;
            }
        }
    } else {
        // full state kalman update, meh
        chol(ekf_S_chol, S, ekf_S_iDiag, N_MEASUREMENTS);
        for (int i = 0; i < N_STATES; i++) {
            float k_row[N_MEASUREMENTS];
            chol_solve(ekf_S_chol, ekf_S_iDiag, N_MEASUREMENTS, (HP+(i*N_MEASUREMENTS)), k_row);
            for (int j = 0; j < N_MEASUREMENTS; j++) {
                K[i + j*N_STATES] = k_row[j];
            }
        }
    }

    float qerror2 = 0.f;
    for (int i = 0; i < 4; i++) {
        qerror2 += (Z[3+i] - X[6+i])*(Z[3+i] - X[6+i]);
    }

    if (qerror2 > 2.f) {
        // quaternion error is too big, negating the measured quaternion will
        // give better convergence
        for (int i = 0; i < 4; i++) {
            Z[3+i] = -Z[3+i];
        }
    }

    // UPDATE STEP X_new, P_new = ...
    {{ update_code }}

    // swap X, X_new and P, P_new pointers
    swap_ptr = X;
    X = X_new;
    X_new = swap_ptr;

    normalize_quaternion(X+6);

    swap_ptr = P;
    P = P_new;
    P_new = swap_ptr;
}

#undef N_STATES
#undef N_INPUTS
#undef N_PROC_NOISES
#undef N_MEASUREMENTS
