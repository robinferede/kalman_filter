
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This file is automatically generated in "Generate Kalman Filter C Code.ipynb" from https://github.com/tudelft/kalman_filter   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "ekf_calc.h"
#include <math.h>

float ekf_use_phi;
float ekf_use_theta;
float ekf_use_psi;

float ekf_Q[N_INPUTS];         // Kalman filter process noise covariance matrix (diagonal)
float ekf_R[N_MEASUREMENTS];   // Kalman filter measurement noise covariance matrix (diagonal)

// state
float ekf_X[N_STATES];
float ekf_X_new[N_STATES];

// covariance matrix (lower diagonal) P[i,j] = P_lower_diagonal[i*(i+1)/2+j] (if i>=j)
float ekf_P_lower_diagonal[N_STATES*(N_STATES+1)/2];
float ekf_P_lower_diagonal_new[N_STATES*(N_STATES+1)/2];

// temporary variables
float tmp[{{ lenTmp }}];

// pointers
float *X = ekf_X;
float *X_new = ekf_X_new;

float *P = ekf_P_lower_diagonal;
float *P_new = ekf_P_lower_diagonal_new;

// renaming
float *Q = ekf_Q;
float *R = ekf_R;

// pointer for swapping
float *swap_ptr;

float* ekf_get_X() {
    return X;
}

float* ekf_get_P() {
    return P;
}

void ekf_set_Q(float Q[N_INPUTS]) {
    for (int i=0; i<N_INPUTS; i++) {
        ekf_Q[i] = Q[i];
    }
}

void ekf_set_R(float R[N_MEASUREMENTS]) {
    for (int i=0; i<N_MEASUREMENTS; i++) {
        ekf_R[i] = R[i];
    }
}

void ekf_set_X(float X0[N_STATES]) {
    for (int i=0; i<N_STATES; i++) {
        X[i] = X0[i];
    }
}

void ekf_set_P_diag(float P_diag[N_STATES]) {
    // set P to zeros
    for (int i=0; i<N_STATES*(N_STATES+1)/2; i++) {
        P[i] = 0.;
    }
    // set diagonal
    for (int i=0; i<N_STATES; i++) {
        P[i*(i+1)/2+i] = P_diag[i];
    }
}

//void ekf_set_P(float P0[N_STATES*(N_STATES+1)/2]) {
//    for (int i=0; i<N_STATES*(N_STATES+1)/2; i++) {
//        P[i] = P0[i];
//    }
//}

void ekf_predict(float U[N_INPUTS], float dt) {
    // PREDICTION STEP X_new, P_new = ...
    {{ prediction_code }}

    // swap X, X_new and P, P_new pointers
    swap_ptr = X;
    X = X_new;
    X_new = swap_ptr;

    swap_ptr = P;
    P = P_new;
    P_new = swap_ptr;
}

void ekf_update(float Z[N_MEASUREMENTS]) {
    // UPDATE STEP X_new, P_new = ...
    {{ update_code }}

    // swap X, X_new and P, P_new pointers
    swap_ptr = X;
    X = X_new;
    X_new = swap_ptr;

    swap_ptr = P;
    P = P_new;
    P_new = swap_ptr;
}

